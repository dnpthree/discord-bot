---

- name: Deploy discord-bot
  hosts: all

  vars_files:
    - vars.yml

  vars:
    image: sergeimaykin/discord-bot:latest
    web_port: 8010
    hostname: botbt.xbbtx.be
    nginx_log_dir: /var/log/nginx/botbt
    pubkey: >
      ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCq/gAKXz6C2zzYcnjs9BUnyry8h+bSAy3/3
      w6e1dgZx+ZoY1ZoAi7KcREMkG4M6SJ1AbQVezCX0yntoQ9gZz8uRNwT3pFUsvfWAKIvRrdEd5
      nutglcB9bCn1AL+EeKirrBATZjePES+F2Do82HmIX7Y3urynU0cHi9j76ZPAoxgmeN7ZJdsVC
      6zek6VQDW+ExwUKMEeHU8QQge5IQjiyGGERXUjCcnfeOw0rytkN4ARrz34cmkx9gqI5DzK9eb
      hMmB5/UQHzg+bk+yhPemcYpbN/OyA92Oua7qasucWEo4AZ/bxOLDEIR2M5LDglFmJkCdBnWvk
      C5NXZ7Ol/XESbI3 bbt@sergei-arch-2016-11-21

  pre_tasks:

    # Users

    - name: Create the local user
      user:
        name: botbt
        shell: /bin/bash

    - name: Allow ssh login
      authorized_key:
        user: botbt
        key: "{{ pubkey }}"

  roles:
    - geerlingguy.docker
    - geerlingguy.certbot

  tasks:

    # Docker

    - name: Ensure docker package is available
      pip:
        name: docker
        state: present

    - name: Ensure a separate network exists
      docker_network:
        name: botbt

    - name: Ensure a database volume exists
      docker_volume:
        name: botbt-db

    - name: Ensure PostgreSQL container runs
      docker_container:
        name: botbt-db
        image: postgres:11-alpine
        hostname: botbt-db
        state: started
        restart: no
        restart_policy: always
        networks:
          - name: botbt
        volumes:
          - botbt-db:/var/lib/postgresql/data
        env:
          POSTGRES_PASSWORD: "{{ db.password }}"

    - name: Ensure main container runs
      docker_container:
        name: botbt-main
        image: "{{ image }}"
        pull: yes
        hostname: botbt-main
        state: started
        restart: no
        restart_policy: always
        networks:
          - name: botbt
        env:
          TOKEN: "{{ token }}"
          OWNER_ID: "{{ owner_id }}"
          SECRET_KEY: "{{ secret_key }}"
          DB_HOST: "botbt-db"
          DB_NAME: "postgres"
          DB_USER: "postgres"
          DB_PASSWORD: "{{ db.password }}"
      tags:
        - quick-update

    - name: Ensure web container runs
      docker_container:
        name: botbt-web
        image: "{{ image }}"
        pull: yes
        hostname: botbt-web
        state: started
        restart: no
        restart_policy: always
        networks:
          - name: botbt
        env:
          TOKEN: "{{ token }}"
          OWNER_ID: "{{ owner_id }}"
          SECRET_KEY: "{{ secret_key }}"
          DB_HOST: "botbt-db"
          DB_NAME: "postgres"
          DB_USER: "postgres"
          DB_PASSWORD: "{{ db.password }}"
        published_ports:
          - "127.0.0.1:{{ web_port }}:8000"
        command: /uwsgi.sh
      tags:
        - quick-update

    # Nginx

    - name: Ensure nginx is installed
      package:
        name: nginx
        state: present

    - name: Ensure log dir exists
      file:
        path: "{{ nginx_log_dir }}"
        state: directory

    - name: Install nginx config
      template:
        src: botbt.conf
        dest: /etc/nginx/sites-available/botbt.conf
      notify:
        - reload nginx

    - name: Enable vhost
      file:
        src: /etc/nginx/sites-available/botbt.conf
        dest: /etc/nginx/sites-enabled/botbt.conf
        state: link
      notify:
        - reload nginx

  handlers:
    - name: reload nginx
      service:
        name: nginx
        state: reloaded
